/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pepsoft.worldpainter.wurm;

import org.pepsoft.worldpainter.*;
import org.pepsoft.worldpainter.Dimension;

import javax.swing.*;
import java.awt.*;

import static org.pepsoft.worldpainter.Constants.TILE_SIZE;
import static org.pepsoft.worldpainter.Constants.TILE_SIZE_BITS;
import static org.pepsoft.worldpainter.wurm.WurmUnlimitedExporter.SCALING_MODE_KEY;
import static org.pepsoft.worldpainter.wurm.WurmUnlimitedExporter.ScalingMode.*;

/**
 *
 * @author Pepijn
 */
public class WurmSettingsDialog extends WorldPainterDialog {
    /**
     * Creates new form WurmSettingsDialog
     */
    public WurmSettingsDialog(Window parent, Dimension dim) {
        super(parent);
        this.dim = dim;

        initComponents();

        switch (WurmUnlimitedExporter.ScalingMode.values()[dim.getAttribute(SCALING_MODE_KEY)]) {
            case MINECRAFT:
                radioButtonMinecraft.setSelected(true);
                break;
            case WURM_SCALED:
                radioButtonWurmScaled.setSelected(true);
                break;
            case WURM_UNSCALED:
                radioButtonWurmUnscaled.setSelected(true);
                break;
        }
        updateWPInfo();
        updateWurmInfo();

        getRootPane().setDefaultButton(buttonGo);
        setLocationRelativeTo(parent);
    }

    public WurmUnlimitedExporter.ScalingMode getScalingMode() {
        if (radioButtonMinecraft.isSelected()) {
            return MINECRAFT;
        } else if (radioButtonWurmScaled.isSelected()) {
            return WURM_SCALED;
        } else {
            return WURM_UNSCALED;
        }
    }

    private void updateWurmInfo() {
        WurmUnlimitedExporter.ScalingMode scalingMode = getScalingMode();
        boolean scaledHorizontally = scalingMode == MINECRAFT, scaledVertically = scalingMode == WURM_SCALED;
        int maxWpSize = Math.max(wpWidth, wpHeight);
        int powerOfTwo = scaledHorizontally
                ? Math.max((int) Math.ceil(Math.log(maxWpSize / 4) / LOG_2), 10)
                : Math.max((int) Math.ceil(Math.log(maxWpSize) / LOG_2), 10);
        if (powerOfTwo > 15) {
            jLabel8.setVisible(true);
            powerOfTwo = 15;
        } else {
            jLabel8.setVisible(false);
        }
        int wurmSize = (int) Math.pow(2, powerOfTwo);
        labelWurmHorizontal.setText(String.format("%d by %d tiles", wurmSize, wurmSize));
        int waterLevel = ((HeightMapTileFactory) dim.getTileFactory()).getWaterHeight();
        if (scaledVertically) {
            labelWurmVertical.setText(String.format("%d to %d dirts", (wpLowestBlock - waterLevel) * 40, (wpHighestBlock - waterLevel) * 40));
        } else {
            labelWurmVertical.setText(String.format("%d to %d dirts", (wpLowestBlock - waterLevel) * 10, (wpHighestBlock - waterLevel) * 10));
        }
    }

    private void updateWPInfo() {
        wpWidth = dim.getWidth() << TILE_SIZE_BITS;
        wpHeight = dim.getHeight() << TILE_SIZE_BITS;
        wpLowestBlock = Integer.MAX_VALUE;
        wpHighestBlock = Integer.MIN_VALUE;
        int maxHeight = dim.getMaxHeight() - 1;
outer:  for (Tile tile: dim.getTiles()) {
            for (int x = 0; x < TILE_SIZE; x++) {
                for (int y = 0; y < TILE_SIZE; y++) {
                    int localHeight = tile.getIntHeight(x, y);
                    if (localHeight < wpLowestBlock) {
                        wpLowestBlock = localHeight;
                    }
                    if (localHeight > wpHighestBlock) {
                        wpHighestBlock = localHeight;
                    }
                    if ((wpLowestBlock <= 0) && (wpHighestBlock >= maxHeight)) {
                        break outer;
                    }
                }
            }
        }
        labelWPHorizontal.setText(String.format("%d by %d blocks", wpWidth, wpHeight));
        labelWPVertical.setText(String.format("%d to %d blocks", wpLowestBlock, wpHighestBlock));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        radioButtonMinecraft = new javax.swing.JRadioButton();
        radioButtonWurmUnscaled = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        buttonMinecraftInfo = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        buttonWurmUnscaledInfo = new javax.swing.JButton();
        radioButtonWurmScaled = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        buttonWurmScaledInfo = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        buttonCancel = new javax.swing.JButton();
        buttonGo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        labelWPHorizontal = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labelWPVertical = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        labelWurmHorizontal = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        labelWurmVertical = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Wurm Unlimited Export Settings");

        jLabel1.setText("Select the scaling mode to apply:");

        jLabel2.setText("Exporting world to Wurm Unlimited map.");

        buttonGroup1.add(radioButtonMinecraft);
        radioButtonMinecraft.setSelected(true);
        radioButtonMinecraft.setText("<html>Minecraft - <em>recommended</em></html>");
        radioButtonMinecraft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonMinecraftActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonWurmUnscaled);
        radioButtonWurmUnscaled.setText("Wurm Unlimited Unscaled");
        radioButtonWurmUnscaled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonWurmUnscaledActionPerformed(evt);
            }
        });

        jLabel4.setText("<html>Retains the same in-game scale.<br>Horizontal scale: four blocks become one tile.<br>Vertical scale: one block becomes ten dirts.</html>");

        buttonMinecraftInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pepsoft/worldpainter/icons/information.png"))); // NOI18N
        buttonMinecraftInfo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonMinecraftInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMinecraftInfoActionPerformed(evt);
            }
        });

        jLabel3.setText("<html>Expands horizontal in-game size by four.<br>Horizonal scale: one block becomes one tile.<br>Vertical scale: one block becomes ten dirts.<br><em>Slopes in WorldPainter are exagerated and distances reported incorrectly.</em></html>");

        buttonWurmUnscaledInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pepsoft/worldpainter/icons/information.png"))); // NOI18N
        buttonWurmUnscaledInfo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonWurmUnscaledInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWurmUnscaledInfoActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonWurmScaled);
        radioButtonWurmScaled.setText("Wurm Unlimited Scaled");
        radioButtonWurmScaled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonWurmScaledActionPerformed(evt);
            }
        });

        jLabel5.setText("<html>Expands horizontal and vertical in-game size by four.<br>Horizontal scale: one block becomes one tile.<br>Vertical scale: one block becomes 40 dirts.<br><em>Heights and distances will be reported incorrectly in WorldPainter.</em></html>");

        buttonWurmScaledInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pepsoft/worldpainter/icons/information.png"))); // NOI18N
        buttonWurmScaledInfo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        buttonWurmScaledInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWurmScaledInfoActionPerformed(evt);
            }
        });

        jLabel6.setText("WorldPainter world dimensions:");

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonGo.setText("Go");
        buttonGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGoActionPerformed(evt);
            }
        });

        jLabel7.setText("Horizontal:");

        jLabel9.setText("Wurm Unlimited map dimensions:");

        labelWPHorizontal.setText("%d by %d blocks");

        jLabel10.setText("Vertical:");

        labelWPVertical.setText("%d to %d blocks");

        jLabel12.setText("Horizontal:");

        labelWurmHorizontal.setText("%d by %d tiles");

        jLabel14.setText("Vertical:");

        labelWurmVertical.setText("%d to %d dirts");

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/pepsoft/worldpainter/icons/error.png"))); // NOI18N
        jLabel8.setText("<html>The WorldPainter world is too large!<br>Only the northwest part will be exported.</html>");
        jLabel8.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radioButtonWurmUnscaled)
                                    .addComponent(radioButtonMinecraft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radioButtonWurmScaled))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonMinecraftInfo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonWurmUnscaledInfo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(buttonWurmScaledInfo))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonGo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(labelWPVertical))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(labelWPHorizontal)))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(labelWurmHorizontal))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(labelWurmVertical))
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonMinecraft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMinecraftInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioButtonWurmUnscaled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonWurmUnscaledInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioButtonWurmScaled)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonWurmScaledInfo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(labelWPHorizontal)
                    .addComponent(jLabel12)
                    .addComponent(labelWurmHorizontal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(labelWPVertical)
                    .addComponent(jLabel14)
                    .addComponent(labelWurmVertical))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCancel)
                    .addComponent(buttonGo))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMinecraftInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMinecraftInfoActionPerformed
        JOptionPane.showMessageDialog(this,
                "This mode retains the same real-world scale and enables worlds created for Minecraft,\n"
                + "or imported from Minecraft, to be converted to Wurm Unlimited.\n"
                + "Since Wurm Unlimited's horizontal resolution is lower than Minecraft's\n"
                + "this means that every four by four block patch of the WorldPainter world\n"
                + "will be converted to one tile in Wurld Unlimited,\n"
                + "with the average height of the blocks in World Painter,\n"
                + "and the terrain type that is most prevalent on that patch in WorldPainter.\n"
                + "Every one block of height difference in WorldPainter\n"
                + "translates to ten dirts in Wurm Unlimited.", "Minecraft Scale", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonMinecraftInfoActionPerformed

    private void buttonWurmUnscaledInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWurmUnscaledInfoActionPerformed
        JOptionPane.showMessageDialog(this,
                "Every 1x1 m block in WorldPainter becomes one 4x4 m tile in Wurm Unlimited,\n"
                + "resulting in a real-world scaling up by a factor of four.\n"
                + "This means the WorldPainter world can be much smaller,\n"
                + "but it does mean that slopes will be exagerated in WorldPainter\n"
                + "and distances reported incorrectly.\n"
                + "The vertical scaling remains the same: every block of height difference\n"
                + "translates to ten dirts.", "Wurm Unlimited Unscaled", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonWurmUnscaledInfoActionPerformed

    private void buttonWurmScaledInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWurmScaledInfoActionPerformed
        JOptionPane.showMessageDialog(this,
                "The horizontal scaling is the same as for Unscaled (each block becomes one tile),\n"
                + "but the vertical distances are multiplied by four in the export,\n"
                + "so a meter of height in WorldPainter becomes four meters (40 dirts) in Wurm Unlimited.\n"
                + "This means that the slopes will be displayed correctly in WorldPainter,\n"
                + "but also that heights reported in WorldPainter are only\n"
                + "a quarter of what they will be in Wurm Unlimited.", "Wurm Unlimited Scaled", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buttonWurmScaledInfoActionPerformed

    private void radioButtonMinecraftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonMinecraftActionPerformed
        updateWurmInfo();
    }//GEN-LAST:event_radioButtonMinecraftActionPerformed

    private void radioButtonWurmUnscaledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonWurmUnscaledActionPerformed
        updateWurmInfo();
    }//GEN-LAST:event_radioButtonWurmUnscaledActionPerformed

    private void radioButtonWurmScaledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonWurmScaledActionPerformed
        updateWurmInfo();
    }//GEN-LAST:event_radioButtonWurmScaledActionPerformed

    private void buttonGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGoActionPerformed
        int scalingModeAttribute = getScalingMode().ordinal();
        if (dim.getAttribute(SCALING_MODE_KEY) != scalingModeAttribute) {
            dim.setAttribute(SCALING_MODE_KEY, scalingModeAttribute);
        }
        ok();
    }//GEN-LAST:event_buttonGoActionPerformed

    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        cancel();
    }//GEN-LAST:event_buttonCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonGo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonMinecraftInfo;
    private javax.swing.JButton buttonWurmScaledInfo;
    private javax.swing.JButton buttonWurmUnscaledInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel labelWPHorizontal;
    private javax.swing.JLabel labelWPVertical;
    private javax.swing.JLabel labelWurmHorizontal;
    private javax.swing.JLabel labelWurmVertical;
    private javax.swing.JRadioButton radioButtonMinecraft;
    private javax.swing.JRadioButton radioButtonWurmScaled;
    private javax.swing.JRadioButton radioButtonWurmUnscaled;
    // End of variables declaration//GEN-END:variables

    private final Dimension dim;
    private int wpWidth, wpHeight, wpLowestBlock, wpHighestBlock;

    private static final double LOG_2 = Math.log(2);
}